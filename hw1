#include <stdlib.h>     /* abs */
#include <algorithm>  //std::max
#include <math.h>       /* sqrt */
#include <cmath>        // std::abs
//#include <iostream>
//using namespace std;


double max(double a, double b) {
	if( a > b)
		return a;
	else
		return b;
}
double delta(int a, int b) {
	double d;
	if (a == b) { d = 1.0; }
	else { d = 0; }
	return d;
}

double permutation(int i, int j, int k) {
	double epsilon;
	epsilon = 0.5*(double(i) - double(j))*(double(j) - double(k))*(double(k) - double(i));
	return epsilon;

}
double det(double F[3][3]) {
	int i, j, k;
	double ans = 0;
	for (i = 0; i <= 2; i++) {
		for (j = 0; j <= 2; j++) {
			for (k = 0; k <= 2; k++) {
				ans = ans + permutation(i, j, k)*F[0][i] * F[1][j] * F[2][k];
			}
		}
	}
	return ans;
}
void matrixmultiplication(double A[3][3], double B[3][3], double C[3][3], const int N) {
	//matrix C=A*B
	int i, j, k;
	for (i = 0; i<N; i++) {
		for (j = 0; j<N; j++) {
			C[i][j] = 0;
			for (k = 0; k<N; k++) {
				C[i][j] = C[i][j] + A[i][k] * B[k][j];
			}
		}
	}

}

void matrixequality(double A[3][3], double B[3][3], const int N) {
	//A=B
	int i, j;
	for (i = 0; i<N; i++) {
		for (j = 0; j<N; j++) {
			A[i][j] = B[i][j];
		}
	}
}

void matrixtranspose(double A[3][3], const int N) {
	int i, j;	
	double B[3][3];
	for (i = 0; i<N; i++) {
		for (j = 0; j<N; j++) {
			B[i][j] = A[j][i];
		}
	}
	matrixequality( A , B, N);
}


void matrixrotate(double S[3][3], double R[3][3], const int N, int i, int j, int k) {
	double temp, temp1, temp2, c, s, G[3][3] = { { 0.0, 0.0, 0.0 },{ 0.0,0.0, 0.0 },{ 0.0,0.0,0.0 } }, tempR[3][3],tempS[3][3];
	
	temp = S[i][i] + S[j][j];
	temp1 = S[j][i] - S[i][j];
	temp2 = sqrt(temp*temp + temp1*temp1);
	c = temp / temp2;
	s = temp1 / temp2;
	G[i][i] = c; G[i][j] = s; G[j][i] = -s; G[j][j] = c; G[k][k] = 1;
	//printf("\n %f   %f    %f ", temp, temp1, temp2);
	matrixmultiplication(G, S, tempS, N);
	matrixequality(S, tempS, N);
	matrixtranspose(G,N);
	matrixmultiplication(R, G, tempR, N);
	matrixequality(R, tempR,N);
}

void Jacobi(double A[2][2],double v[2][2], double lambda[2] ) {
	double temp, a, b, c;
	a = 1; b = -(A[0][0] + A[1][1]); c = A[0][0] * A[1][1] - A[0][1] * A[1][0];
	lambda[0] =-b/(2*a)+sqrt(b*b-4*a*c) / (2 * a);
	lambda[1] = -b / (2 * a) - sqrt(b*b - 4 * a*c) / (2 * a);
	if (lambda[0] < lambda[1]) { 
		temp = lambda[0];
		lambda[0] = lambda[1];
		lambda[1] = temp;
	}
	temp = sqrt((A[0][0]- lambda[0])*(A[0][0] - lambda[0])+ A[0][1]*A[0][1]);
	v[0][0] =-A[0][1]/temp ;
	v[1][0] = (A[0][0] - lambda[0])/temp;
	v[0][1] = -v[1][0];
	v[1][1] = v[0][0];

}


void My_Polar( double F[3][3], double R[3][3], double S[3][3]){
	int i,j,k,N = 3,it = 0, max_it = 50;
double   tol = 0.0000001;
matrixequality(S, F, N);
while (it<max_it || max(max(abs(S[1][0] - S[0][1]), abs(S[2][0] - S[0][2])), abs(S[2][1] - S[1][2]))>tol) {
	matrixrotate(S, R, N, 0, 1, 2);
	matrixrotate(S, R, N, 0, 2, 1);
	matrixrotate(S, R, N, 1, 2, 0);
	it=it+1;	
}
}


void My_SVD(double F[2][2], double U[2][2], double sigma[2], double V[2][2]) {
	int  i, j, k;
	const int N = 2; // why N cannot be input?
	double C[N][N],  temp, A[N][N], c, s,lambda[2];
	for (int i = 0; i<N; i++) {
		for (int j = 0; j<N; j++) {
			C[i][j] = 0;
			for (int k = 0; k<N; k++) {
				C[i][j] = C[i][j] + F[k][i] * F[k][j];   //C=transpose(F)*F
			}
		}
	}
	Jacobi(C, V, lambda);
	/*if (lambda[0] >= lambda[1]) {
		sigma[0] = sqrt(lambda[0]); sigma[1] = sqrt(lambda[1]);
	}
	else {
		sigma[0] = sqrt(lambda[1]); sigma[1]= sqrt(lambda[0]);
		V[][] =  {V[0][1],V[0][0]},{ V[1][1],V[1][0] } ;
	}*/
	sigma[0] = sqrt(lambda[0]); 
	sigma[1] = sqrt(lambda[1]);
	//get Matrix A
	for (int i = 0; i<N; i++) {
		for (int j = 0; j<N; j++) {
			A[i][j] = 0;
			for (int k = 0; k<N; k++) {
				A[i][j] = A[i][j] + F[i][k] * V[k][j];   //A=F*V
			}
		}
	}
	c = A[0][0] / sigma[0];
	s = -A[1][0] / sigma[0];
	
	if (A[0][1]*s+A[1][1]*c<0) {
		//flip
		sigma[1] = -sigma[1];
		//U[0][0] = c; U[0][1] = s; U[1][0] = -s; U[1][1] = c;
	}
	else {
		
		//U[0][0] = c; U[0][1] = s; U[1][0] = -s; U[1][1] = c;
	}
	U[0][0] = c; U[0][1] = s; U[1][0] = -s; U[1][1] = c;
	

}



void main() {
	
	/*double F[3][3] = { { 1,2,3 },{ -4,-3,-2 } ,{ 3,4,5 } }, R[3][3]= { { 1.0,0.0,0.0 },{ 0.0,1.0,0.0 },{ 0.0,0.0,1.0 } },S[3][3];
	My_Polar(F, R, S);
	printf("\n %f   %f    %f ", S[0][0], S[0][1], S[0][2]);
	printf("\n %f   %f    %f ", S[1][0], S[1][1], S[1][2]);
	printf("\n %f   %f    %f ", S[2][0], S[2][1], S[2][2]);
	printf("\n\n");
	printf("\n %f   %f    %f ", R[0][0], R[0][1], R[0][2]);
	printf("\n %f   %f    %f ", R[1][0], R[1][1], R[1][2]);
	printf("\n %f   %f    %f ", R[2][0], R[2][1], R[2][2]);
	printf("\n %f\n", det(R));
	printf("\n %f   %f    %f ", F[0][0], F[0][1], F[0][2]);
	printf("\n %f   %f    %f ", F[1][0], F[1][1], F[1][2]);
	printf("\n %f   %f    %f ", F[2][0], F[2][1], F[2][2]);
	printf("\n\n");*/

	double F[2][2] = { {1,2},{-3,-4} },U[2][2],sigma[2],V[2][2];
	My_SVD(F, U, sigma, V);
	printf("\n %f   %f ", U[0][0], U[0][1]);
	printf("\n %f   %f ", U[1][0], U[1][1]);
	printf("\n\n");
	printf("\n %f   %f ", sigma[0], sigma[1]);
	printf("\n\n");
	printf("\n %f   %f ", V[0][0], V[0][1]);
	printf("\n %f   %f ", V[1][0], V[1][1]);
	printf("\n\n");

	printf("\n %f   %f ", U[0][0]*sigma[0]*V[0][0]+ U[0][1] * sigma[1] * V[0][1], U[0][0] * sigma[0] * V[1][0] + U[0][1] * sigma[1] * V[1][1]);
	printf("\n %f   %f ", U[1][0] * sigma[0] * V[0][0] + U[1][1] * sigma[1] * V[0][1], U[1][0] * sigma[0] * V[1][0] + U[1][1] * sigma[1] * V[1][1]);
	printf("\n\n");
	
	system("pause");

}