#include <stdlib.h>     /* abs */
#include <algorithm>  //std::max
#include <math.h>       /* sqrt */
#include <cmath>        // std::abs

double max(double a, double b) {
	if( a > b)
		return a;
	else
		return b;
}
double delta(int a, int b) {
	double d;
	if (a == b) { d = 1.0; }
	else { d = 0; }
	return d;
}

double permutation(int i, int j, int k) {
	double epsilon;
	epsilon = 0.5*(double(i) - double(j))*(double(j) - double(k))*(double(k) - double(i));
	return epsilon;

}
double det(double F[3][3]) {
	int i, j, k;
	double ans = 0;
	for (i = 0; i <= 2; i++) {
		for (j = 0; j <= 2; j++) {
			for (k = 0; k <= 2; k++) {
				ans = ans + permutation(i, j, k)*F[0][i] * F[1][j] * F[2][k];
			}
		}
	}
	return ans;
}
void matrixmultiplication(double A[3][3], double B[3][3], double C[3][3], const int N) {
	//matrix C=A*B
	int i, j, k;
	for (i = 0; i<N; i++) {
		for (j = 0; j<N; j++) {
			C[i][j] = 0;
			for (k = 0; k<N; k++) {
				C[i][j] = C[i][j] + A[i][k] * B[k][j];
			}
		}
	}

}

void matrixequality(double A[3][3], double B[3][3], const int N) {
	//A=B
	int i, j, k;
	for (i = 0; i<N; i++) {
		for (j = 0; j<N; j++) {
			A[i][j] = B[i][j];
		}
	}
}

void matrixtranspose(double A[3][3], const int N) {
	int i, j, k;
	
	double B[3][3];
	for (i = 0; i<N; i++) {
		for (j = 0; j<N; j++) {
			B[i][j] = A[j][i];
		}
	}
	matrixequality( A , B, N);
}


void matrixrotate(double S[3][3], double R[3][3],const int N, int i, int j, int k) {

	double temp, temp1, temp2, c, s, G[3][3] = { { 0.0, 0.0, 0.0 },{ 0.0,0.0, 0.0 },{ 0.0,0.0,0.0 } }, tempR[3][3],tempS[3][3];

	temp = S[i][i] + S[j][j];
	temp1 = S[j][i] - S[i][j];
	temp2 = sqrt(temp*temp + temp1*temp1);
	c = temp / temp2;
	s = temp1 / temp2;
	G[i][i] = c; G[i][j] = s; G[j][i] = -s; G[j][j] = c; G[k][k] = 1;
	//printf("\n %f   %f    %f ", temp, temp1, temp2);
	matrixmultiplication(G, S, tempS, N);
	matrixequality(S, tempS, N);
	matrixtranspose(G,N);
	matrixmultiplication(R, G, tempR, N);
	matrixequality(R, tempR,N);

}

void main(){
	int i,j,k,N,it = 0, max_it = 10;
N = 3;
double F[3][3]= { { 1,2,3 },{ 4,3,2 } ,{ 3,4,5 } }, R[3][3] = { { 1.0,0.0,0.0 },{ 0.0,1.0,0.0 },{ 0.0,0.0,1.0 } }, S[3][3], tol = 0.0000001;

// given F

matrixequality(S, F, N);

while (it<max_it || max(max(abs(S[1][0] - S[0][1]), abs(S[2][0] - S[0][2])), abs(S[2][1] - S[1][2]))>tol) {
	matrixrotate(S, R, N, 0, 1, 2);
	matrixrotate(S, R, N, 0, 2, 1);
	matrixrotate(S, R, N, 1, 2, 0);
	it=it+1;
	printf("\n %d %.9f %.9f ", it, max(max(abs(S[1][0] - S[0][1]), abs(S[2][0] - S[0][2])), abs(S[2][1] - S[1][2])),tol);
}
matrixmultiplication(R, S, F, N);

printf("\n %f   %f    %f ", S[0][0],S[0][1],S[0][2]);
printf("\n %f   %f    %f ", S[1][0], S[1][1], S[1][2]);
printf("\n %f   %f    %f ", S[2][0], S[2][1], S[2][2]);
printf("\n\n");
printf("\n %f   %f    %f ", R[0][0], R[0][1], R[0][2]);
printf("\n %f   %f    %f ", R[1][0], R[1][1], R[1][2]);
printf("\n %f   %f    %f ", R[2][0], R[2][1], R[2][2]);
printf("\n %f\n", det(R) );
printf("\n %f   %f    %f ", F[0][0], F[0][1], F[0][2]);
printf("\n %f   %f    %f ", F[1][0], F[1][1], F[1][2]);
printf("\n %f   %f    %f ", F[2][0], F[2][1], F[2][2]);
printf("\n\n");

//system("pause");


}